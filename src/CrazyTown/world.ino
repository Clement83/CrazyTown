//store the different sprites in PROGMEM to save RAM

const byte RoofTop[] PROGMEM = {16,16,0xFF,0xFF,0xC0,0x3,0xBF,0xFD,0xA0,0x5,0xA0,0x45,0xA2,0x5,0xA0,0x15,0xA0,0x5,0xAF,0x5,0xA9,0x5,0xA9,0x25,0xAF,0x5,0xA0,0x5,0xBF,0xFD,0xC0,0x3,0xFF,0xFF,};
/*const byte RouteCorner[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xF0,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10,0xF8,0x10,0x8,0x10,0x8,0x10,0x8,0x10,0x8,0x10,};
const byte RouteCroix[] PROGMEM = {16,16,0x8,0x10,0x8,0x10,0x8,0x10,0x8,0x10,0xF8,0x1F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF8,0x1F,0x8,0x10,0x8,0x10,0x8,0x10,0x8,0x10,};
const byte RouteLigne[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
const byte RouteT[] PROGMEM = {16,16,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xFF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF8,0x1F,0x8,0x10,0x8,0x10,0x8,0x10,0x8,0x10,};

*/



#define WORLD_W 8
#define WORLD_H 64
const byte world[WORLD_W*WORLD_H] PROGMEM = {
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
B10000000,B00000000,B01111111,B11111111,B11100000,B00000000,B00000000,B00001111,
B10111111,B11111111,B01111111,B11111111,B11101111,B01111011,B11011101,B11101111,
B10111111,B11111111,B00000000,B00000000,B00001111,B01111011,B11011101,B11101111,
B10000000,B01111111,B01111111,B11110111,B11101111,B01111011,B11011101,B11101111,
B11111111,B01111111,B01111111,B11110011,B11101111,B00000000,B00000001,B11101111,
B11111111,B01111000,B01111111,B11111011,B11101111,B01111011,B11011101,B11101111,
B11111111,B01111011,B01111111,B11111011,B11101111,B01111011,B11011101,B11100001,
B11111111,B01111011,B01111111,B11111011,B11101111,B01111011,B11011101,B11101101,
B11000000,B01111011,B01111111,B11111011,B11101111,B00000000,B00000001,B11101101,
B11011111,B01111011,B01100000,B00111011,B11101111,B11111111,B11111111,B11101101,
B11011111,B01111011,B01101111,B10111011,B11100111,B11111111,B11111111,B11100001,
B11011111,B01111011,B01101111,B10000011,B11110111,B10000000,B00000000,B11101111,
B11011111,B01111011,B01101111,B10111111,B11110111,B10111111,B11111110,B01101111,
B11011111,B01111011,B01101111,B10111111,B11110111,B10111111,B11111111,B01100001,
B11000000,B00000000,B00000111,B10000000,B00000000,B00111111,B11111111,B01101101,
B11111111,B11101111,B11110000,B00111111,B11111111,B11111111,B11111111,B01101101,
B11111111,B11101111,B11111011,B11111111,B11111111,B11111000,B00000000,B01100001,
B11111111,B11101110,B00000011,B11111111,B11111111,B11100011,B11111111,B01101111,
B11111100,B00000000,B11111011,B11111111,B11100000,B00001111,B11111111,B01101111,
B11111101,B11111111,B11111001,B11111111,B11101111,B11111111,B11111111,B00000111,
B11000001,B11111111,B11111100,B00000000,B00001111,B11111111,B11111111,B11010111,
B11011011,B11111111,B11111101,B11111111,B11101111,B11111111,B11111111,B11010111,
B11011011,B11111111,B11111101,B11111111,B11100111,B11111111,B11111111,B11010001,
B11011011,B11111111,B11111101,B11111111,B11110111,B11111111,B11111111,B11011101,
B11011010,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000101,
B11011010,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000101,
B11011010,B01111111,B11111111,B11111110,B11111101,B11111111,B11111111,B11100101,
B11011010,B01111111,B11110000,B00000000,B11111101,B11111111,B11111111,B11100101,
B11011010,B01111111,B11110111,B11111111,B10001101,B11111111,B11111111,B11100101,
B11011010,B01111111,B11110111,B11111111,B10101101,B11111111,B11110000,B11100101,
B11011010,B01111111,B11110111,B00000001,B10100100,B00000000,B00000110,B11100101,
B10000000,B00000000,B00000111,B01111101,B10110111,B11111111,B11111110,B11100101,
B10110110,B01111111,B01111111,B01111101,B10110000,B00000000,B00000010,B11100101,
B10110110,B01000001,B01111111,B01111101,B10011111,B11111111,B11111010,B00000101,
B10110110,B01011101,B00000000,B00111101,B11011111,B11111111,B10001010,B11100101,
B10110110,B01010101,B01111111,B10111100,B00011000,B00000000,B00100010,B11100101,
B10110110,B01010101,B01111111,B10111111,B11111011,B11101111,B10111110,B11100101,
B10110010,B01010101,B01111110,B00000000,B11111010,B00101111,B10111110,B11100101,
B10111010,B01010101,B01111110,B11111110,B11111000,B10101111,B10111110,B11100101,
B10111010,B01010001,B01111110,B11111110,B11111101,B10101111,B10000000,B11100101,
B10111010,B01011111,B01111110,B11110000,B00000001,B10001111,B11111111,B11100101,
B10111010,B01011110,B00111110,B11110111,B11111111,B11111111,B11111111,B11100101,
B10001010,B01000000,B10111110,B11110111,B11111111,B11111111,B11111111,B11100101,
B10101010,B01111111,B10111110,B11110111,B11111111,B11100000,B00000000,B00000101,
B10101010,B01111111,B10111110,B00000111,B11111111,B11100000,B00000000,B00000101,
B10101010,B01111111,B10111111,B11110000,B00000111,B11100111,B11101110,B11111101,
B10101010,B01111111,B10111111,B11111111,B11110111,B11100111,B11101110,B00000001,
B10100010,B01100000,B00111111,B11111111,B11110111,B11100111,B00001110,B11111101,
B10111110,B01101111,B11111111,B11111111,B11110011,B11100111,B01111110,B00001101,
B10100000,B01101111,B11100000,B00000000,B11111011,B11100111,B00000000,B10101101,
B10001110,B01101111,B11101111,B11111110,B11111011,B11100111,B01111111,B10100001,
B11011110,B01101111,B11101111,B11100000,B00000011,B11100111,B01111111,B10111101,
B11011110,B01100000,B00000000,B00001111,B11111111,B11100100,B00000000,B00011101,
B11000010,B01111111,B11101111,B11111111,B11111111,B11100101,B11110111,B11011001,
B11011010,B01111111,B11101111,B11111111,B11111111,B11100101,B11110111,B11011011,
B11011010,B01111111,B11101111,B11111111,B11111111,B11100101,B11110111,B11011011,
B10000010,B01111111,B11101111,B11111111,B11111111,B11100100,B11110000,B00011011,
B10111010,B00000000,B00000000,B00000000,B00000000,B00000110,B11110111,B11111011,
B10111010,B00000000,B00000000,B00000000,B00000000,B00000110,B11110111,B11111001,
B10111011,B11111111,B11111111,B11111111,B11101111,B11111110,B00000011,B11111101,
B10111000,B00000001,B11111110,B00000000,B11101111,B11000110,B11111000,B00000101,
B10000011,B11111100,B00000000,B11111110,B00000000,B00010000,B11111111,B11110001,
B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
};


byte getTile(byte x, byte y){
  Serial.print(y);  Serial.print(" <= y | x => "); Serial.print(x);Serial.print(" || ");
 /* if(x & 1)//odd
    return pgm_read_byte(world + y*(WORLD_W/2) + x/2) & B00001111;
  else //even*/
  //le decalage dépend de la position du joueur je divise x/8 car j'ai 8 bit dans un byte. puis je décale du nombre de bit util pour ne garder que le premier
  return (pgm_read_byte(world + y + x/8) >> (8-((x%8) +1))& B00000001);
}

void drawWorld(){
  /*for(byte y = max(0, (camera_y)/16); y < min(64, (camera_y+LCDHEIGHT)/16+1); y++){
    for(byte x = max(0, (camera_x)/16); x < min(WORLD_H, (camera_x+LCDWIDTH)/16+1); x++){
      byte spriteID = getTile(x,y);
      if(spriteID == 0)
        continue;
      //coordinates on the screen depending on the camera position
      int x_screen = x*16 - camera_x;
      int y_screen = y*16 - camera_y;
      gb.display.drawBitmap(x_screen, y_screen, RoofTop);
    }
  }*/
  
  for(byte x=0;x<16;x++)
  {
    for(byte y=0;y<16;y++)
    {
      Serial.println(getTile(x,y));
    }
  }
  drawTitleScreen();
}

void drawMap(){
  /*gb.display.fillRect(0,0,18,18);
  gb.display.setColor(WHITE);
  for(byte y = 0; y < 64; y++){
    for(byte x = 0; x < 64; x++){
      char tile_x = x + player.x/64 - 8;
      char tile_y = y + player.y/64 - 8;
      if(tile_x < 0 || tile_x > WORLD_W || tile_y < 0 || tile_y > WORLD_H)
        continue;
      if(getTile(x + player.x, y + player.y) == 0)
        gb.display.drawPixel(x+1, y+1);
    }
  }
  gb.display.setColor(BLACK);
  gb.display.drawPixel(9,9);*/
}



